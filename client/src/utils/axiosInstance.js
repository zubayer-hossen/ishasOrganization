// src/utils/axiosInstance.js (The centralized and fixed API client)

import axios from 'axios';

// 1. Axios Instance Creation
const axiosInstance = axios.create({
┬а // тЬЕ Environment variable ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржнрж╛рж▓рзЛ, fallback рж╣рж┐рж╕рзЗржмрзЗ рж╣рж╛рж░рзНржбржХрзЛржб ржХрж░рж╛ рж╣рж▓рзЛред
┬а baseURL:'https://ishasorganizationbackend.onrender.com/api',
┬а withCredentials: true, // Refresh token cookie ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржЕржкрж░рж┐рж╣рж╛рж░рзНржп
});

/**
┬а* ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ Redux store ржХрзЗ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ рж╣рж┐рж╕рзЗржмрзЗ ржирзЗржпрж╝ ржПржмржВ interceptor рж╕рзЗржЯржЖржк ржХрж░рзЗред
┬а* ржПржЯрж┐ circular dependency рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗ (ржПржХрзНрж╖рзЗрждрзНрж░рзЗ dynamic import ржПрж░ ржорж╛ржзрзНржпржорзЗ)ред
┬а* ржЖржкржирж╛рж░ main.jsx/App.jsx ржлрж╛ржЗрж▓рзЗ ржПржЯрж┐ ржХрж▓ ржХрж░рждрзЗ рж╣ржмрзЗред
┬а* @param {Store} store - The Redux store instance.
┬а*/
export const setupInterceptors = (store) => {

┬а // 2. Request Interceptor: ржкрзНрж░рждрж┐ржЯрж┐ API call-ржПрж░ ржЖржЧрзЗ Redux State ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп
┬а axiosInstance.interceptors.request.use(
┬а ┬а (config) => {
┬а ┬а ┬а // тЬЕ FIX: localStorage ржПрж░ ржмржжрж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ Redux state ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржирзЗржУржпрж╝рж╛ рж╣ржЪрзНржЫрзЗ
┬а ┬а ┬а const token = store.getState().auth.accessToken; 
      
┬а ┬а ┬а if (token) {
┬а ┬а ┬а ┬а config.headers['Authorization'] = `Bearer ${token}`;
┬а ┬а ┬а }
┬а ┬а ┬а return config;
┬а ┬а },
┬а ┬а (error) => Promise.reject(error)
┬а );

┬а // 3. Response Interceptor: 401 error ржкрзЗрж▓рзЗ ржЯрзЛржХрзЗржи рж░рж┐ржлрзНрж░рзЗрж╢ ржХрж░рж╛рж░ ржЬржирзНржп
┬а axiosInstance.interceptors.response.use(
┬а ┬а (res) => res,
┬а ┬а async (err) => {
┬а ┬а ┬а const originalRequest = err.config;

┬а ┬а ┬а // ржпржжрж┐ 401 error рж╣ржпрж╝, ржПржмржВ ржПржЯрж┐ Refresh Token Endpoint ржирж╛ рж╣ржпрж╝, ржПржмржВ ржкрзНрж░ржержоржмрж╛рж░ retry ржХрж░рж╛ рж╣ржпрж╝
┬а ┬а ┬а if (
┬а ┬а ┬а ┬а err.response?.status === 401 && 
        !originalRequest._retry &&
        originalRequest.url !== '/auth/refresh_token'
┬а ┬а ┬а ) {
┬а ┬а ┬а ┬а originalRequest._retry = true;

┬а ┬а ┬а ┬а try {
┬а ┬а ┬а ┬а ┬а // ржирждрзБржи access token-ржПрж░ ржЬржирзНржп API call (ржПржЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯрзЗ withCredentials: true ржкрзНрж░ржпрж╝рзЛржЬржи)
┬а ┬а ┬а ┬а ┬а // ЁЯТб ржПржЦрж╛ржирзЗ axiosInstance ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржХрж╛рж░ржг ржПрждрзЗ withCredentials: true ржЖржЫрзЗ 
┬а ┬а ┬а ┬а ┬а const res = await axiosInstance.post('/auth/refresh_token');
┬а ┬а ┬а ┬а ┬а const newAccessToken = res.data.accessToken;

┬а ┬а ┬а ┬а ┬а // тЬЕ FIX: dynamic import ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ circular dependency ржПржбрж╝рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ
┬а ┬а ┬а ┬а ┬а const { setAccessToken } = await import('../redux/slices/authSlice');
┬а ┬а ┬а ┬а ┬а store.dispatch(setAccessToken(newAccessToken)); // Redux state ржЖржкржбрзЗржЯ

┬а ┬а ┬а ┬а ┬а // ржорзВрж▓ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯрзЗрж░ header-ржП ржирждрзБржи ржЯрзЛржХрзЗржи рж╕рзЗржЯ ржХрж░рж╛
┬а ┬а ┬а ┬а ┬а originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;

┬а ┬а ┬а ┬а ┬а // ржирждрзБржи ржЯрзЛржХрзЗржи ржжрж┐ржпрж╝рзЗ ржорзВрж▓ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржирзЛ
┬а ┬а ┬а ┬а ┬а return axiosInstance(originalRequest);
          
┬а ┬а ┬а ┬а } catch (e) {
┬а ┬а ┬а ┬а ┬а console.error("Refresh Token Failed. User is being logged out.", e);
┬а ┬а ┬а ┬а ┬а // ржпржжрж┐ refresh token call ржмрзНржпрж░рзНрже рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ logout ржХрж░рж╛ рж╣ржмрзЗ
┬а ┬а ┬а ┬а ┬а const { logout } = await import('../redux/slices/authSlice');
┬а ┬а ┬а ┬а ┬а store.dispatch(logout());
┬а ┬а ┬а ┬а ┬а // window.location.href = '/login'; // ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж░рж┐ржбрж╛ржЗрж░рзЗржХрзНржЯ 
┬а ┬а ┬а ┬а ┬а return Promise.reject(e);
┬а ┬а ┬а ┬а }
┬а ┬а ┬а }
┬а ┬а ┬а 
┬а ┬а ┬а // ржЕржирзНржп 401 error ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ error рж╣рж▓рзЗ, рж╕рж░рж╛рж╕рж░рж┐ Reject ржХрж░рж╛
┬а ┬а ┬а return Promise.reject(err);
┬а ┬а }
┬а );
};

// 4. Export the instance for use in Redux Thunks
export default axiosInstance;