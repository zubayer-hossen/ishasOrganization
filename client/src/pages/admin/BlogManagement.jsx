import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchBlogs } from "../../redux/slices/blogSlice";
// ‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï Axios Instance import ‡¶ï‡¶∞‡ßÅ‡¶®
import axios from "../../utils/axiosInstance";
import { toast } from "react-toastify";

export default function BlogManagement() {
  const dispatch = useDispatch();
  // ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá 'blog' slice ‡¶è blogs, loading, error ‡¶Ü‡¶õ‡ßá
  const { blogs, loading, error } = useSelector((state) => state.blog);

  const [form, setForm] = useState({
    title: "",
    body: "",
    image: "",
  });

  // ‚ÑπÔ∏è ‡¶è‡¶á state ‡¶ü‡¶ø Update Modal ‡¶¨‡¶æ Form ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá,
  // ‡¶§‡¶¨‡ßá ‡¶∏‡¶π‡¶ú ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ Add ‡¶ì Delete ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§
  // const [isEditing, setIsEditing] = useState(false);
  // const [currentBlog, setCurrentBlog] = useState(null);

  useEffect(() => {
    // ‡¶¨‡ßç‡¶≤‡¶ó ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞
    dispatch(fetchBlogs());
  }, [dispatch]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // ================= ADD BLOG FUNCTION =================
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // ‚úÖ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá Headers ‡¶¨‡¶æ Token ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á,
      // ‡¶ï‡¶æ‡¶∞‡¶£ axiosInstance.js-‡¶è Interceptor ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶¨‡ßá‡•§
      const res = await axios.post("/blogs", form);

      // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ 201 ‡¶π‡¶≤‡ßá
      toast.success("Blog added successfully! ü•≥");
      setForm({ title: "", body: "", image: "" });
      dispatch(fetchBlogs()); // ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶≤‡¶ó ‡¶∏‡¶π ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    } catch (err) {
      console.error("Create Blog Error:", err);
      // 'unauthorized no token' error ‡¶π‡¶≤‡ßá‡¶ì Interceptor ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá Refresh Token ‡¶¶‡¶ø‡ßü‡ßá
      // handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü, ‡¶§‡¶¨‡ßá ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡¶¨‡ßá ‡¶¨‡¶æ error ‡¶¶‡ßá‡¶¨‡ßá‡•§
      toast.error(
        err.response?.data?.msg || "Failed to add blog. Check credentials/role."
      );
    }
  };

  // ================= DELETE BLOG FUNCTION =================
  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this blog?")) {
      try {
        // ‚úÖ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶ì Headers ‡¶¨‡¶æ Token ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á‡•§
        await axios.delete(`/blogs/${id}`);

        toast.success("Blog deleted successfully! üóëÔ∏è");
        dispatch(fetchBlogs()); // ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      } catch (err) {
        console.error("Delete Blog Error:", err);
        toast.error(
          err.response?.data?.msg || "Failed to delete blog. Check permissions."
        );
      }
    }
  };

  if (loading)
    return <p className="text-center text-blue-600 mt-4">Loading blogs...</p>;
  if (error) return <p className="text-center text-red-500 mt-4">{error}</p>;

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h2 className="text-2xl font-bold mb-6 text-indigo-700">
        üìù Blog Management
      </h2>

      {/* Add Blog Form */}
      <form onSubmit={handleSubmit} className="mb-6 space-y-4">
        <input
          type="text"
          name="title" // name prop ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          placeholder="Title"
          value={form.title}
          onChange={handleChange} // handleChange ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          className="border p-2 rounded w-full"
          required
        />
        <textarea
          name="body" // name prop ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          placeholder="Body"
          value={form.body}
          onChange={handleChange} // handleChange ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          className="border p-2 rounded w-full"
          rows={4}
        />
        <input
          type="text"
          name="image" // name prop ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          placeholder="Image URL"
          value={form.image}
          onChange={handleChange} // handleChange ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          className="border p-2 rounded w-full"
        />
        <button
          type="submit"
          className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
        >
          Add Blog
        </button>
      </form>

      {/* Blog Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200 border rounded-lg shadow-lg">
          <thead className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
            <tr>
              <th className="px-6 py-3 text-left text-sm font-medium uppercase">
                Title
              </th>
              <th className="px-6 py-3 text-left text-sm font-medium uppercase">
                Body
              </th>
              <th className="px-6 py-3 text-left text-sm font-medium uppercase">
                Image
              </th>
              <th className="px-6 py-3 text-left text-sm font-medium uppercase">
                Published
              </th>
              <th className="px-6 py-3 text-left text-sm font-medium uppercase">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {blogs.map((b, idx) => (
              <tr
                key={b._id}
                className={idx % 2 === 0 ? "bg-gray-50" : "bg-white"}
              >
                <td className="px-6 py-4 font-semibold text-gray-800">
                  {b.title}
                </td>
                <td className="px-6 py-4 text-gray-700 line-clamp-2">
                  {b.body}
                </td>
                <td className="px-6 py-4">
                  {b.image ? (
                    <img
                      src={b.image}
                      alt={b.title}
                      className="w-24 h-16 object-cover rounded"
                    />
                  ) : (
                    "No image"
                  )}
                </td>
                <td className="px-6 py-4 text-gray-600">
                  {new Date(b.publishedAt).toLocaleString("en-US", {
                    weekday: "short",
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </td>
                <td className="px-6 py-4 space-x-2">
                  {/* ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø Edit Button ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® */}
                  {/* <button className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600">
                    Edit
                  </button> */}
                  <button
                    onClick={() => handleDelete(b._id)}
                    className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
